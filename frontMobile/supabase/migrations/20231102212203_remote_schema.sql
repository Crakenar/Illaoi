
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."adress_has_packages" (
    "id" bigint NOT NULL,
    "adress_id" smallint NOT NULL,
    "package_id" smallint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."adress_has_packages" OWNER TO "postgres";

ALTER TABLE "public"."adress_has_packages" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."adress_has_packages_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."adresses" (
    "id" smallint NOT NULL,
    "label" character varying,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_id" "uuid" DEFAULT "auth"."uid"() NOT NULL
);

ALTER TABLE "public"."adresses" OWNER TO "postgres";

ALTER TABLE "public"."adresses" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."adresses_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."packages" (
    "id" smallint NOT NULL,
    "label" character varying,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_id" "uuid" DEFAULT "auth"."uid"() NOT NULL
);

ALTER TABLE "public"."packages" OWNER TO "postgres";

ALTER TABLE "public"."packages" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."packages_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."tour_has_adresses" (
    "id" bigint NOT NULL,
    "tour_id" smallint NOT NULL,
    "adress_id" smallint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);

ALTER TABLE "public"."tour_has_adresses" OWNER TO "postgres";

ALTER TABLE "public"."tour_has_adresses" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."tour_has_adresses_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."tours" (
    "id" smallint NOT NULL,
    "label" character varying,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_id" "uuid" DEFAULT "auth"."uid"() NOT NULL
);

ALTER TABLE "public"."tours" OWNER TO "postgres";

ALTER TABLE "public"."tours" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."tours_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY "public"."adress_has_packages"
    ADD CONSTRAINT "adress_has_packages_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."adresses"
    ADD CONSTRAINT "adresses_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."packages"
    ADD CONSTRAINT "packages_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."tour_has_adresses"
    ADD CONSTRAINT "tour_has_adresses_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."tours"
    ADD CONSTRAINT "tours_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."adress_has_packages"
    ADD CONSTRAINT "adress_has_packages_adress_id_fkey" FOREIGN KEY ("adress_id") REFERENCES "public"."adresses"("id");

ALTER TABLE ONLY "public"."adress_has_packages"
    ADD CONSTRAINT "adress_has_packages_package_id_fkey" FOREIGN KEY ("package_id") REFERENCES "public"."packages"("id");

ALTER TABLE ONLY "public"."tour_has_adresses"
    ADD CONSTRAINT "tour_has_adresses_adress_id_fkey" FOREIGN KEY ("adress_id") REFERENCES "public"."adresses"("id");

ALTER TABLE ONLY "public"."tour_has_adresses"
    ADD CONSTRAINT "tour_has_adresses_tour_id_fkey" FOREIGN KEY ("tour_id") REFERENCES "public"."tours"("id");

CREATE POLICY "Individuals can delete their adresses" ON "public"."adresses" FOR DELETE TO "authenticated" USING (("auth"."uid"() = "user_id"));

CREATE POLICY "Individuals can delete their packages" ON "public"."packages" FOR DELETE TO "authenticated" USING (("auth"."uid"() = "user_id"));

CREATE POLICY "Individuals can delete their tours" ON "public"."tours" FOR DELETE TO "authenticated" USING (("auth"."uid"() = "user_id"));

CREATE POLICY "Individuals can insert new adresses" ON "public"."adresses" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Individuals can insert new packages" ON "public"."packages" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Individuals can insert new tours" ON "public"."tours" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Individuals can update their adresses" ON "public"."adresses" FOR UPDATE TO "authenticated" USING (("auth"."uid"() = "user_id"));

CREATE POLICY "Individuals can update their packages" ON "public"."packages" FOR UPDATE TO "authenticated" USING (("auth"."uid"() = "user_id"));

CREATE POLICY "Individuals can update their tours" ON "public"."tours" FOR UPDATE TO "authenticated" USING (("auth"."uid"() = "user_id"));

CREATE POLICY "Individuals can view their own adresses." ON "public"."adresses" FOR SELECT USING (("auth"."uid"() = "user_id"));

CREATE POLICY "Individuals can view their own packages." ON "public"."packages" FOR SELECT USING (("auth"."uid"() = "user_id"));

CREATE POLICY "Individuals can view their own tours." ON "public"."tours" FOR SELECT USING (("auth"."uid"() = "user_id"));

ALTER TABLE "public"."adress_has_packages" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."adresses" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."packages" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."tour_has_adresses" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."tours" ENABLE ROW LEVEL SECURITY;

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON TABLE "public"."adress_has_packages" TO "anon";
GRANT ALL ON TABLE "public"."adress_has_packages" TO "authenticated";
GRANT ALL ON TABLE "public"."adress_has_packages" TO "service_role";

GRANT ALL ON SEQUENCE "public"."adress_has_packages_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."adress_has_packages_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."adress_has_packages_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."adresses" TO "anon";
GRANT ALL ON TABLE "public"."adresses" TO "authenticated";
GRANT ALL ON TABLE "public"."adresses" TO "service_role";

GRANT ALL ON SEQUENCE "public"."adresses_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."adresses_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."adresses_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."packages" TO "anon";
GRANT ALL ON TABLE "public"."packages" TO "authenticated";
GRANT ALL ON TABLE "public"."packages" TO "service_role";

GRANT ALL ON SEQUENCE "public"."packages_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."packages_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."packages_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."tour_has_adresses" TO "anon";
GRANT ALL ON TABLE "public"."tour_has_adresses" TO "authenticated";
GRANT ALL ON TABLE "public"."tour_has_adresses" TO "service_role";

GRANT ALL ON SEQUENCE "public"."tour_has_adresses_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."tour_has_adresses_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."tour_has_adresses_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."tours" TO "anon";
GRANT ALL ON TABLE "public"."tours" TO "authenticated";
GRANT ALL ON TABLE "public"."tours" TO "service_role";

GRANT ALL ON SEQUENCE "public"."tours_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."tours_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."tours_id_seq" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
